{"version":3,"sources":["serviceWorker.ts","js/calculator.ts","store/reducers/calcReducer.ts","components/Calculator/CalcBtns.tsx","components/Calculator/CalcInput.tsx","components/Calculator/Calculator.tsx","components/Header.tsx","components/App.tsx","store/store.ts","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Calculator","expression","offset","operand","this","operands","indexOf","includes","result","position","priority","checkBrackets","bracketsAmount","i","length","start","end","slice","currentPos","number","parseInt","split","reverse","join","params","operations","checkExpression","hasOperands","hasBrackets","getOperand","first","second","getBrackets","innerExpression","calculate","replace","toString","getFirstNumber","getSecondNumber","calc","pow","resultInnerExpresion","Math","sqrt","toFixed","op","hasFirstNumber","hasSecondNumber","specPosition","checkNumbers","calculator","initState","cursorPosition","actions","value","type","calcReducer","action","alert","CalcBtns","props","dispatch","useDispatch","addToExpression","className","onClick","CalcInput","inputRef","useRef","ref","onFocus","e","preventDefault","current","setSelectionRange","onMouseUp","onKeyDown","onChange","autoFocus","useSelector","calcPage","Header","icon","fixedWidth","App","reducers","combineReducers","store","createStore","library","add","faCalculator","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.35f77deb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {strict} from \"assert\";\r\n\r\ntype Operands = \" + \" | \" - \" | \" / \" | \" * \" | \"^\" | \"sqrt\" |\"\"\r\ntype BinarryOp = {\r\n    first:number\r\n    second:number\r\n}\r\ntype GetOperand = {\r\n    position:number\r\n    operand:string\r\n    priority:number\r\n}\r\ntype Pow = {\r\n    number:number\r\n    pow:number\r\n}\r\ntype Sqrt = {\r\n    number:number\r\n}\r\ntype ParamsCalcType = BinarryOp & Pow & Sqrt\r\ntype GetBrackets = {\r\n    start:number\r\n    end:number\r\n}\r\n\r\nclass Calculator {\r\n    public static operands = {\r\n        \" + \": 1,\r\n        \" - \": 1,\r\n        \" / \": 2,\r\n        \" * \": 2,\r\n        \"^\": 3,\r\n        \"sqrt\": 4\r\n    }\r\n    public static operations = {\r\n        \" + \": ({first, second}: BinarryOp) => first + second,\r\n        \" - \": ({first, second}: BinarryOp) => first - second,\r\n        \" * \": ({first, second}: BinarryOp) => first * second,\r\n        \" / \": ({first, second}: BinarryOp) => first / second,\r\n        \"^\": ({number, pow}:Pow) => number ** pow,\r\n        \"sqrt\": ({number}:Sqrt) => +Math.sqrt(number).toFixed(2)\r\n    }\r\n\r\n    public static hasOperands(expression: string, offset:number = 0): boolean {\r\n        for (let operand in this.operands) {\r\n            if (expression.indexOf(operand, offset) !== -1) {\r\n                return expression.includes(operand)\r\n            }\r\n        }\r\n\r\n        return false\r\n    }\r\n    public static getOperand(expression: string, offset:number = 0):GetOperand {\r\n        let result: GetOperand = {\r\n            position: 0,\r\n            operand: \"\",\r\n            priority: 0\r\n        }\r\n\r\n        let operands = this.operands\r\n        type OperandType = keyof typeof operands\r\n\r\n        for (let operand in this.operands) {\r\n            if (expression.indexOf(operand, offset) !== -1) {\r\n                if (this.operands[operand as OperandType] > result.priority) {\r\n                    result.position = expression.indexOf(operand)\r\n                    result.operand = operand\r\n                    result.priority = this.operands[operand as OperandType]\r\n                } else if (this.operands[operand as OperandType] === result.priority) {\r\n                    if (result.position > expression.indexOf(operand)) {\r\n                        result.position = expression.indexOf(operand)\r\n                        result.operand = operand\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return result\r\n    }\r\n\r\n    public static hasBrackets(expression:string):boolean {\r\n        return expression.includes(\"(\") && expression.includes(\")\") && this.checkBrackets(expression)\r\n    }\r\n    public static checkBrackets(expression:string):boolean {\r\n        let bracketsAmount = 0\r\n\r\n        for (let i = 0; i < expression.length; i++) {\r\n            switch (expression[i]) {\r\n                case \"(\":\r\n                    bracketsAmount++\r\n                break\r\n                case \")\":\r\n                    bracketsAmount--\r\n                break\r\n            }\r\n\r\n            if (bracketsAmount < 0) {\r\n                return false\r\n            }\r\n        }\r\n\r\n        return bracketsAmount === 0\r\n    }\r\n    public static getBrackets(expression:string, offset:number = 0):GetBrackets {\r\n        const result:GetBrackets = {\r\n            start: 0,\r\n            end: expression.length\r\n        }\r\n\r\n        for (let i = offset; i < expression.length; i++) {\r\n            if (expression[i] === \"(\") {\r\n                result.start = i\r\n                break\r\n            }\r\n        }\r\n\r\n        for (let i = result.start + 1; i < expression.length; i++) {\r\n            if (expression[i] === \")\") {\r\n                if (this.checkBrackets(expression.slice(result.start, i + 1))) {\r\n                    result.end = i + 1\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        return result\r\n    }\r\n\r\n    public static getFirstNumber(expression:string, position:number, offset:number = 0):number|null {\r\n        let currentPos = position - offset\r\n        let number = \"\"\r\n\r\n        while (\r\n            ((parseInt(expression[currentPos]) || parseInt(expression[currentPos]) === 0) ||\r\n                expression[currentPos] === \".\" ||\r\n                expression[currentPos] === \"-\") && currentPos !== -1\r\n            ) {\r\n            number += expression[currentPos]\r\n            currentPos--\r\n        }\r\n\r\n        if (number === \"\") {\r\n            return null\r\n        }\r\n\r\n        return +(number.split(\"\").reverse().join(\"\"))\r\n    }\r\n    public static getSecondNumber(expression:string, position:number, offset:number = 0):number|null {\r\n        let currentPos = position + offset\r\n        let number = \"\"\r\n\r\n        while (\r\n            ((parseInt(expression[currentPos]) || parseInt(expression[currentPos]) === 0) ||\r\n                expression[currentPos] === \".\" ||\r\n                expression[currentPos] === \"-\") && currentPos !== expression.length\r\n            ) {\r\n            number += expression[currentPos]\r\n            currentPos++\r\n        }\r\n\r\n        if (number === \"\") {\r\n            return null\r\n        }\r\n\r\n        return +number\r\n    }\r\n\r\n    private static calc(operand:Operands, params:ParamsCalcType):number {\r\n        const operands = this.operands\r\n        type OperandType = keyof typeof operands\r\n\r\n        return this.operations[operand as OperandType](params)\r\n    }\r\n    public static calculate(expression:string):number {\r\n        if (!checkExpression(expression)) {\r\n            return -1\r\n        }\r\n\r\n        while (this.hasOperands(expression) || this.hasBrackets(expression)) {\r\n            const {operand, position} = this.getOperand(expression)\r\n\r\n            let first:number = 0\r\n            let second:number = 0\r\n\r\n            let result:number = 0\r\n\r\n            if (operand === \"sqrt\") {\r\n                const {start, end} = this.getBrackets(expression, position + 3)\r\n                const innerExpression = expression.slice(start + 1, end - 1)\r\n                const resultInnerExpresion = this.calculate(innerExpression)\r\n                const result = this.calc(operand as Operands, {\r\n                    number:resultInnerExpresion\r\n                } as ParamsCalcType)\r\n\r\n                expression = expression.replace(`sqrt(${innerExpression})`, result.toString())\r\n\r\n                continue\r\n            }\r\n\r\n            if (this.hasBrackets(expression)) {\r\n                const {start, end} = this.getBrackets(expression)\r\n                const innerExpression = expression.slice(start + 1, end - 1)\r\n                const result = this.calculate(innerExpression)\r\n\r\n                expression = expression.replace(`(${innerExpression})`, result.toString())\r\n\r\n                continue\r\n            }\r\n\r\n            if (operand === \"^\") {\r\n                first = this.getFirstNumber(expression, position, 1) as number\r\n                second = this.getSecondNumber(expression, position, 1) as number\r\n\r\n                result = this.calc(operand as Operands, {\r\n                    number:first,\r\n                    pow:second\r\n                } as ParamsCalcType)\r\n\r\n                expression = expression.replace(`${first}^${second}`, result.toString())\r\n            } else {\r\n                first = this.getFirstNumber(expression, position + 1, 2) as number\r\n                second = this.getSecondNumber(expression, position + 1, 2) as number\r\n\r\n                result = this.calc(operand as Operands, {\r\n                    first:first,\r\n                    second:second\r\n                } as ParamsCalcType)\r\n\r\n                expression = expression.replace(`${first}${operand}${second}`, result.toString())\r\n            }\r\n        }\r\n\r\n        return +expression\r\n    }\r\n}\r\n\r\nconst checkExpression = (expression:string):boolean => {\r\n    const getOperand = (offset:number):GetOperand => {\r\n        let position = -1\r\n        let op = \"\"\r\n\r\n        for (let operand in Calculator.operands) {\r\n            if (position === -1) {\r\n                position = expression.indexOf(operand, offset)\r\n                op = operand\r\n            }\r\n            if (expression.indexOf(operand, offset) !== -1) {\r\n                if (position > expression.indexOf(operand, offset)) {\r\n                    position = expression.indexOf(operand, offset)\r\n                    op = operand\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            position: position,\r\n            operand: op\r\n        } as GetOperand\r\n    }\r\n    const hasFirstNumber = (position:number, offset:number = 0):boolean => {\r\n        return !!Calculator.getFirstNumber(expression, position, offset)\r\n    }\r\n    const hasSecondNumber = (position:number, offset:number = 0):boolean => {\r\n        return !!Calculator.getSecondNumber(expression, position, offset)\r\n    }\r\n\r\n    //FOR CHECK\r\n    const checkNumbers = ():boolean => {\r\n        let offset = 0\r\n\r\n        while (Calculator.hasOperands(expression, offset)) {\r\n            let {position, operand} = getOperand(offset)\r\n            let {position: specPosition, operand: specOperand} = Calculator.getOperand(expression)\r\n\r\n            if (specOperand === \"sqrt\") {\r\n                const {start, end} = Calculator.getBrackets(expression, specPosition + 3)\r\n                const innerExpression = expression.slice(start + 1, end - 1)\r\n\r\n                if (!checkExpression(innerExpression)) {\r\n                    return false\r\n                } else {\r\n                    const result = Calculator.calculate(innerExpression)\r\n\r\n                    expression = expression.replace(`sqrt(${innerExpression})`, result.toString())\r\n                }\r\n            } else if (operand === \"^\") {\r\n                if (\r\n                    !hasFirstNumber(position, 1) ||\r\n                    !hasSecondNumber(position, 1)\r\n                ) {\r\n                    return false\r\n                }\r\n            } else {\r\n                if (\r\n                    !hasFirstNumber(position + 1, 2) ||\r\n                    !hasSecondNumber(position + 1, 2)\r\n                ) {\r\n                    return false\r\n                }\r\n            }\r\n\r\n            offset = position + 1\r\n        }\r\n\r\n        return true\r\n    }\r\n    const checkMinuses = ():boolean => {\r\n        return !expression.includes(\"--\")\r\n    }\r\n    const checkDots = ():boolean => {\r\n        return !expression.includes(\"..\")\r\n    }\r\n\r\n    return Calculator.checkBrackets(expression) && checkNumbers() && checkMinuses() && checkDots()\r\n}\r\n\r\n// @ts-ignore\r\nwindow.calculator = Calculator\r\n// @ts-ignore\r\nwindow.checkExpression = checkExpression\r\n\r\nexport default {\r\n    calc(expression: string):number {\r\n        return Calculator.calculate(expression)\r\n    },\r\n    checkExpression(expression:string):boolean {\r\n        return checkExpression(expression)\r\n    }\r\n}","import {CombineActions} from \"../store\"\r\nimport calc from \"../../js/calculator\"\r\n\r\nconst initState = {\r\n    expression: [] as string[],\r\n    cursorPosition: 0\r\n}\r\n\r\ntype InitStateType = typeof initState\r\nexport type ActionsTypes = ReturnType<CombineActions<typeof actions>>\r\n\r\nconst calcReducer = (state: InitStateType = initState, action: ActionsTypes): InitStateType => {\r\n    switch (action.type) {\r\n        case \"calc/ADD_TO_EXPRESSION\": {\r\n            return {\r\n                ...state,\r\n                expression: [\r\n                    ...state.expression.slice(0, state.cursorPosition),\r\n                    action.value,\r\n                    ...state.expression.slice(state.cursorPosition, state.expression.length)\r\n                ],\r\n                cursorPosition: state.cursorPosition + 1\r\n            }\r\n        }\r\n        case \"calc/REMOVE_ONE_NUMBER\": {\r\n            let cursorPosition = state.cursorPosition - 1\r\n\r\n            if (state.cursorPosition - 1 <= 0) {\r\n                cursorPosition = 1\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                expression: [\r\n                    ...state.expression.slice(0, state.cursorPosition - 1),\r\n                    ...state.expression.slice(state.cursorPosition, state.expression.length)\r\n                ],\r\n                cursorPosition: cursorPosition\r\n            }\r\n        }\r\n        case \"calc/MOVE_CURSOR_LEFT\": {\r\n            let cursorPosition = state.cursorPosition - 1\r\n\r\n            if (state.cursorPosition - 1 <= 0) {\r\n                cursorPosition = 1\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                cursorPosition: cursorPosition\r\n            }\r\n        }\r\n        case \"calc/MOVE_CURSOR_RIGHT\": {\r\n            let cursorPosition = state.cursorPosition + 1\r\n\r\n            if (state.cursorPosition + 1 >= state.expression.length) {\r\n                cursorPosition = state.expression.length\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                cursorPosition: cursorPosition\r\n            }\r\n        }\r\n        case \"calc/CLEAR_EXPRESSION\": {\r\n            return {\r\n                ...state,\r\n                expression: [],\r\n                cursorPosition: 0\r\n            }\r\n        }\r\n        case \"calc/SOLVE\": {\r\n            if (calc.checkExpression(state.expression.join(\"\"))) {\r\n                let result = calc.calc(state.expression.join(\"\")).toString().split(\"\")\r\n\r\n                return {\r\n                    ...state,\r\n                    expression: result,\r\n                    cursorPosition: result.length\r\n                }\r\n            } else {\r\n                alert(\"Ошибка вычисления! Проверьте выражение:\" +\r\n                    \"\\n1)Не должно быть идущим друг за другом операндов, например: 1 + + 1\" +\r\n                    \"\\n2)Не должно быть идущих друг за другом точек, например: 1...20\"+\r\n                    \"\\n3)Вероятно, где-то не хватает чисел, например: 1 + \")\r\n\r\n                return {\r\n                    ...state\r\n                }\r\n            }\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    addToExpression: (value: string) => ({\r\n        type: \"calc/ADD_TO_EXPRESSION\",\r\n        value: value\r\n    } as const),\r\n    removeOneNumber: () => ({\r\n        type: \"calc/REMOVE_ONE_NUMBER\"\r\n    } as const),\r\n    moveCursorLeft: () => ({\r\n        type: \"calc/MOVE_CURSOR_LEFT\"\r\n    } as const),\r\n    moveCursorRight: () => ({\r\n        type: \"calc/MOVE_CURSOR_RIGHT\"\r\n    } as const),\r\n    clearExpression: () => ({\r\n        type: \"calc/CLEAR_EXPRESSION\"\r\n    } as const),\r\n    solve: () => ({\r\n        type: \"calc/SOLVE\"\r\n    } as const)\r\n}\r\n\r\nexport default calcReducer","import React from \"react\";\r\nimport \"../../scss/CalcBtns.scss\"\r\nimport {useDispatch} from \"react-redux\";\r\nimport {actions} from \"../../store/reducers/calcReducer\";\r\n\r\ntype PropsType = {\r\n    expression:string\r\n};\r\n\r\nconst CalcBtns: React.FC<PropsType> = (props) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const addToExpression = (value:string) => {\r\n        return () => {\r\n            dispatch(actions.addToExpression(value))\r\n        }\r\n    }\r\n    const addSqrt = () => {\r\n        addToExpression(\"sqrt\")()\r\n        addToExpression(\"(\")()\r\n        addToExpression(\")\")()\r\n    }\r\n    const addDot = () => {\r\n        addToExpression(\".\")()\r\n    }\r\n\r\n    const moveCursorLeft = () => {\r\n        dispatch(actions.moveCursorLeft())\r\n    }\r\n    const moveCursorRight = () => {\r\n        dispatch(actions.moveCursorRight())\r\n    }\r\n\r\n    const removeOneNmbr = () => {\r\n        dispatch(actions.removeOneNumber())\r\n    }\r\n    const clearExpression = () => {\r\n        dispatch(actions.clearExpression())\r\n    }\r\n\r\n    const solve = () => {\r\n        dispatch(actions.solve())\r\n    }\r\n\r\n    return (\r\n        <div className=\"CalcBtns d-flex flex-column mt-1\">\r\n            <div className=\"d-flex flex-row\">\r\n                <input\r\n                    type=\"button\"\r\n                    value=\"⇐\"\r\n                    className=\"EnterNumberBtn\"\r\n                    onClick={moveCursorLeft}\r\n                />\r\n                <input\r\n                    type=\"button\"\r\n                    value=\"⇒\"\r\n                    className=\"EnterNumberBtn ml-1\"\r\n                    onClick={moveCursorRight}\r\n                />\r\n                <input\r\n                    type=\"button\"\r\n                    value=\"(\"\r\n                    className=\"EnterNumberBtn ml-1\"\r\n                    onClick={addToExpression(\"(\")}\r\n                />\r\n                <input\r\n                    type=\"button\"\r\n                    value=\")\"\r\n                    className=\"EnterNumberBtn ml-1\"\r\n                    onClick={addToExpression(\")\")}\r\n                />\r\n            </div>\r\n\r\n\r\n            <div className=\"mt-1\">\r\n                <div>\r\n                    <input\r\n                        type=\"button\"\r\n                        value=\"C\"\r\n                        className=\"EnterNumberBtn\"\r\n                        onClick={clearExpression}\r\n                    />\r\n                    <input\r\n                        type=\"button\"\r\n                        value=\"X\"\r\n                        className=\"EnterNumberBtn ml-1\"\r\n                        onClick={removeOneNmbr}\r\n                    />\r\n                    <input\r\n                        type=\"button\"\r\n                        value=\"√\"\r\n                        className=\"EnterNumberBtn ml-1\"\r\n                        onClick={addSqrt}\r\n                    />\r\n                    <input\r\n                        type=\"button\"\r\n                        value=\"/\"\r\n                        className=\"EnterNumberBtn ml-1\"\r\n                        onClick={addToExpression(\" / \")}\r\n                    />\r\n                </div>\r\n                <div className=\"mt-1\">\r\n                    <input\r\n                        type=\"button\"\r\n                        value=\"1\"\r\n                        className=\"EnterNumberBtn\"\r\n                        onClick={addToExpression(\"1\")}\r\n                    />\r\n                    <input\r\n                        type=\"button\"\r\n                        value=\"2\"\r\n                        className=\"EnterNumberBtn ml-1\"\r\n                        onClick={addToExpression(\"2\")}\r\n                    />\r\n                    <input\r\n                        type=\"button\"\r\n                        value=\"3\"\r\n                        className=\"EnterNumberBtn ml-1\"\r\n                        onClick={addToExpression(\"3\")}\r\n                    />\r\n                    <input\r\n                        type=\"button\"\r\n                        value=\"×\"\r\n                        className=\"EnterNumberBtn ml-1\"\r\n                        onClick={addToExpression(\" * \")}\r\n                    />\r\n                </div>\r\n                <div className=\"mt-1\">\r\n                    <input\r\n                        type=\"button\"\r\n                        value=\"4\"\r\n                        className=\"EnterNumberBtn\"\r\n                        onClick={addToExpression(\"4\")}\r\n                    />\r\n                    <input\r\n                        type=\"button\"\r\n                        value=\"5\"\r\n                        className=\"EnterNumberBtn ml-1\"\r\n                        onClick={addToExpression(\"5\")}\r\n                    />\r\n                    <input\r\n                        type=\"button\"\r\n                        value=\"6\"\r\n                        className=\"EnterNumberBtn ml-1\"\r\n                        onClick={addToExpression(\"6\")}\r\n                    />\r\n                    <input\r\n                        type=\"button\"\r\n                        value=\"-\"\r\n                        className=\"EnterNumberBtn ml-1\"\r\n                        onClick={addToExpression(\" - \")}\r\n                    />\r\n                </div>\r\n                <div className=\"mt-1\">\r\n                    <input\r\n                        type=\"button\"\r\n                        value=\"7\"\r\n                        className=\"EnterNumberBtn\"\r\n                        onClick={addToExpression(\"7\")}\r\n                    />\r\n                    <input\r\n                        type=\"button\"\r\n                        value=\"8\"\r\n                        className=\"EnterNumberBtn ml-1\"\r\n                        onClick={addToExpression(\"8\")}\r\n                    />\r\n                    <input\r\n                        type=\"button\"\r\n                        value=\"9\"\r\n                        className=\"EnterNumberBtn ml-1\"\r\n                        onClick={addToExpression(\"9\")}\r\n                    />\r\n                    <input\r\n                        type=\"button\"\r\n                        value=\"+\"\r\n                        className=\"EnterNumberBtn ml-1\"\r\n                        onClick={addToExpression(\" + \")}\r\n                    />\r\n                </div>\r\n                <div className=\"mt-1\">\r\n                    <input\r\n                        type=\"button\"\r\n                        value=\"±\"\r\n                        className=\"EnterNumberBtn\"\r\n                        onClick={addToExpression(\"-\")}\r\n                    />\r\n                    <input\r\n                        type=\"button\"\r\n                        value=\"0\"\r\n                        className=\"EnterNumberBtn ml-1\"\r\n                        onClick={addToExpression(\"0\")}\r\n                    />\r\n                    <input\r\n                        type=\"button\"\r\n                        value=\".\"\r\n                        className=\"EnterNumberBtn ml-1\"\r\n                        onClick={addDot}\r\n                    />\r\n                    <input\r\n                        type=\"button\"\r\n                        value=\"=\"\r\n                        className=\"EnterNumberBtn ml-1\"\r\n                        onClick={solve  }\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CalcBtns;","import React, {useRef} from \"react\";\r\nimport \"../../scss/CalcInput.scss\"\r\n\r\ntype PropsType = {\r\n    expression:string\r\n    cursorPosition:number\r\n}\r\n\r\nconst CalcInput:React.FC<PropsType> = (props) => {\r\n    const inputRef = useRef<HTMLInputElement>(null)\r\n\r\n    const onFocus = (e:React.FocusEvent<HTMLInputElement>) => {\r\n        e.preventDefault()\r\n\r\n        if (inputRef.current) {\r\n            inputRef.current.setSelectionRange(props.cursorPosition, props.cursorPosition)\r\n        }\r\n    }\r\n    const onMouseUp = (e:React.MouseEvent<HTMLInputElement>) => {\r\n        e.preventDefault()\r\n\r\n        if (inputRef.current) {\r\n            inputRef.current.setSelectionRange(props.cursorPosition, props.cursorPosition)\r\n        }\r\n    }\r\n    const onKeyDown = (e:React.KeyboardEvent<HTMLInputElement>) => {\r\n        e.preventDefault()\r\n    }\r\n    const onChange = (e:React.ChangeEvent<HTMLInputElement>) => {\r\n        e.preventDefault()\r\n    }\r\n\r\n    return (\r\n        <input\r\n            type=\"text\"\r\n            value={props.expression}\r\n            ref={inputRef}\r\n            onFocus={onFocus}\r\n            onMouseUp={onMouseUp}\r\n            onKeyDown={onKeyDown}\r\n            onChange={onChange}\r\n            className=\"CalcInput w-100\"\r\n            autoFocus={true}\r\n        />\r\n    )\r\n}\r\n\r\nexport default CalcInput","import React from \"react\";\r\nimport CalcBtns from \"./CalcBtns\";\r\nimport CalcInput from \"./CalcInput\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {StateType} from \"../../store/store\";\r\nimport \"../../scss/Calculator.scss\"\r\n\r\ntype PropsType = {};\r\n\r\nconst Calculator: React.FC<PropsType> = (props) => {\r\n    const expression = useSelector((state:StateType) => state.calcPage.expression)\r\n    const cursorPosition = useSelector((state:StateType) => state.calcPage.cursorPosition)\r\n\r\n    return (\r\n        <div className=\"Calculator d-flex align-items-center flex-column\">\r\n            <CalcInput\r\n                expression={expression.join(\"\")}\r\n                cursorPosition={expression.slice(0, cursorPosition).join(\"\").length}\r\n            />\r\n            <CalcBtns\r\n                expression={expression.join(\"\")}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Calculator;","import React from \"react\";\r\n\r\nimport \"../scss/Header.scss\"\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\ntype PropsType = {};\r\n\r\nconst Header: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <header className=\"Header w-100\">\r\n            <div className=\"container d-flex align-items-center justify-content-center h-100\">\r\n                <div className=\"Logo d-flex flex-row align-items-center\">\r\n                    <div className=\"mr-1\">Calculator</div>\r\n                    <FontAwesomeIcon icon=\"calculator\" fixedWidth={true}/>\r\n                </div>\r\n            </div>\r\n        </header>\r\n    )\r\n};\r\n\r\nexport default Header;","import React from \"react\";\r\nimport Calculator from \"./Calculator/Calculator\";\r\nimport Header from \"./Header\";\r\n\r\ntype PropsType = {};\r\n\r\nconst App: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className=\"App d-flex flex-column align-items-center\">\r\n            <Header />\r\n            <div className=\"mt-3\">\r\n                <Calculator />\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default App;","import {createStore, combineReducers} from \"redux\";\r\nimport calcReducer from \"./reducers/calcReducer\";\r\n\r\nconst reducers = combineReducers({\r\n    calcPage: calcReducer\r\n});\r\n\r\nconst store = createStore(reducers);\r\n\r\nexport type StateType = ReturnType<typeof reducers>;\r\nexport type CombineActions<T> = T extends { [key: string]: infer U } ? U : never;\r\n\r\nexport default store;","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\nimport {Provider} from \"react-redux\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport {library} from \"@fortawesome/fontawesome-svg-core\";\nimport {faCalculator} from \"@fortawesome/free-solid-svg-icons\";\nimport App from \"./components/App\"\nimport store from \"./store/store\"\nimport {BrowserRouter} from \"react-router-dom\";\n\nlibrary.add(faCalculator)\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\nserviceWorker.register();\n"],"sourceRoot":""}